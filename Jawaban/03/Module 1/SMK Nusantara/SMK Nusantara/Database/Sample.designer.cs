#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SMK_Nusantara.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="cpt03")]
	public partial class SampleDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClass(Class instance);
    partial void UpdateClass(Class instance);
    partial void DeleteClass(Class instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertDetailClass(DetailClass instance);
    partial void UpdateDetailClass(DetailClass instance);
    partial void DeleteDetailClass(DetailClass instance);
    partial void InsertDetailSchedule(DetailSchedule instance);
    partial void UpdateDetailSchedule(DetailSchedule instance);
    partial void DeleteDetailSchedule(DetailSchedule instance);
    partial void InsertDetailScore(DetailScore instance);
    partial void UpdateDetailScore(DetailScore instance);
    partial void DeleteDetailScore(DetailScore instance);
    partial void InsertExpertise(Expertise instance);
    partial void UpdateExpertise(Expertise instance);
    partial void DeleteExpertise(Expertise instance);
    partial void InsertHeaderSchedule(HeaderSchedule instance);
    partial void UpdateHeaderSchedule(HeaderSchedule instance);
    partial void DeleteHeaderSchedule(HeaderSchedule instance);
    partial void InsertShift(Shift instance);
    partial void UpdateShift(Shift instance);
    partial void DeleteShift(Shift instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    partial void InsertTeacher(Teacher instance);
    partial void UpdateTeacher(Teacher instance);
    partial void DeleteTeacher(Teacher instance);
    #endregion
		
		public SampleDataContext() : 
				base(global::SMK_Nusantara.Properties.Settings.Default.cpt03ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SampleDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SampleDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SampleDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SampleDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Class> Classes
		{
			get
			{
				return this.GetTable<Class>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<DetailClass> DetailClasses
		{
			get
			{
				return this.GetTable<DetailClass>();
			}
		}
		
		public System.Data.Linq.Table<DetailSchedule> DetailSchedules
		{
			get
			{
				return this.GetTable<DetailSchedule>();
			}
		}
		
		public System.Data.Linq.Table<DetailScore> DetailScores
		{
			get
			{
				return this.GetTable<DetailScore>();
			}
		}
		
		public System.Data.Linq.Table<Expertise> Expertises
		{
			get
			{
				return this.GetTable<Expertise>();
			}
		}
		
		public System.Data.Linq.Table<HeaderSchedule> HeaderSchedules
		{
			get
			{
				return this.GetTable<HeaderSchedule>();
			}
		}
		
		public System.Data.Linq.Table<Shift> Shifts
		{
			get
			{
				return this.GetTable<Shift>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<Teacher> Teachers
		{
			get
			{
				return this.GetTable<Teacher>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Class")]
	public partial class Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ClassName;
		
		private System.Nullable<int> _Grade;
		
		private EntitySet<DetailClass> _DetailClasses;
		
		private EntitySet<HeaderSchedule> _HeaderSchedules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassNameChanging(string value);
    partial void OnClassNameChanged();
    partial void OnGradeChanging(System.Nullable<int> value);
    partial void OnGradeChanged();
    #endregion
		
		public Class()
		{
			this._DetailClasses = new EntitySet<DetailClass>(new Action<DetailClass>(this.attach_DetailClasses), new Action<DetailClass>(this.detach_DetailClasses));
			this._HeaderSchedules = new EntitySet<HeaderSchedule>(new Action<HeaderSchedule>(this.attach_HeaderSchedules), new Action<HeaderSchedule>(this.detach_HeaderSchedules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grade", DbType="Int")]
		public System.Nullable<int> Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_DetailClass", Storage="_DetailClasses", ThisKey="ClassName", OtherKey="ClassName")]
		public EntitySet<DetailClass> DetailClasses
		{
			get
			{
				return this._DetailClasses;
			}
			set
			{
				this._DetailClasses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_HeaderSchedule", Storage="_HeaderSchedules", ThisKey="ClassName", OtherKey="ClassName")]
		public EntitySet<HeaderSchedule> HeaderSchedules
		{
			get
			{
				return this._HeaderSchedules;
			}
			set
			{
				this._HeaderSchedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailClasses(DetailClass entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_DetailClasses(DetailClass entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
		
		private void attach_HeaderSchedules(HeaderSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_HeaderSchedules(HeaderSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userid;
		
		private string _username;
		
		private string _password;
		
		private string _role;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<Teacher> _Teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuseridChanging(int value);
    partial void OnuseridChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnroleChanging(string value);
    partial void OnroleChanged();
    #endregion
		
		public User()
		{
			this._Student = default(EntityRef<Student>);
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(8)")]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					if ((this._Student.HasLoadedOrAssignedValue || this._Teacher.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(10)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role", DbType="VarChar(8)")]
		public string role
		{
			get
			{
				return this._role;
			}
			set
			{
				if ((this._role != value))
				{
					this.OnroleChanging(value);
					this.SendPropertyChanging();
					this._role = value;
					this.SendPropertyChanged("role");
					this.OnroleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_User", Storage="_Student", ThisKey="username", OtherKey="StudentId", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._username = value.StudentId;
					}
					else
					{
						this._username = default(string);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_User", Storage="_Teacher", ThisKey="username", OtherKey="TeacherId", IsForeignKey=true)]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._username = value.TeacherId;
					}
					else
					{
						this._username = default(string);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DetailClass")]
	public partial class DetailClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DetailClassId;
		
		private string _ClassName;
		
		private string _StudentId;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailClassIdChanging(int value);
    partial void OnDetailClassIdChanged();
    partial void OnClassNameChanging(string value);
    partial void OnClassNameChanged();
    partial void OnStudentIdChanging(string value);
    partial void OnStudentIdChanged();
    #endregion
		
		public DetailClass()
		{
			this._Class = default(EntityRef<Class>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailClassId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DetailClassId
		{
			get
			{
				return this._DetailClassId;
			}
			set
			{
				if ((this._DetailClassId != value))
				{
					this.OnDetailClassIdChanging(value);
					this.SendPropertyChanging();
					this._DetailClassId = value;
					this.SendPropertyChanged("DetailClassId");
					this.OnDetailClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="VarChar(5)")]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="VarChar(8)")]
		public string StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_DetailClass", Storage="_Class", ThisKey="ClassName", OtherKey="ClassName", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.DetailClasses.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.DetailClasses.Add(this);
						this._ClassName = value.ClassName;
					}
					else
					{
						this._ClassName = default(string);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_DetailClass", Storage="_Student", ThisKey="StudentId", OtherKey="StudentId", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.DetailClasses.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.DetailClasses.Add(this);
						this._StudentId = value.StudentId;
					}
					else
					{
						this._StudentId = default(string);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DetailSchedule")]
	public partial class DetailSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DetailId;
		
		private System.Nullable<int> _ScheduleId;
		
		private string _SubjectId;
		
		private string _TeacherId;
		
		private string _Day;
		
		private System.Nullable<int> _ShiftId;
		
		private EntitySet<DetailScore> _DetailScores;
		
		private EntityRef<HeaderSchedule> _HeaderSchedule;
		
		private EntityRef<Shift> _Shift;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIdChanging(int value);
    partial void OnDetailIdChanged();
    partial void OnScheduleIdChanging(System.Nullable<int> value);
    partial void OnScheduleIdChanged();
    partial void OnSubjectIdChanging(string value);
    partial void OnSubjectIdChanged();
    partial void OnTeacherIdChanging(string value);
    partial void OnTeacherIdChanged();
    partial void OnDayChanging(string value);
    partial void OnDayChanged();
    partial void OnShiftIdChanging(System.Nullable<int> value);
    partial void OnShiftIdChanged();
    #endregion
		
		public DetailSchedule()
		{
			this._DetailScores = new EntitySet<DetailScore>(new Action<DetailScore>(this.attach_DetailScores), new Action<DetailScore>(this.detach_DetailScores));
			this._HeaderSchedule = default(EntityRef<HeaderSchedule>);
			this._Shift = default(EntityRef<Shift>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DetailId
		{
			get
			{
				return this._DetailId;
			}
			set
			{
				if ((this._DetailId != value))
				{
					this.OnDetailIdChanging(value);
					this.SendPropertyChanging();
					this._DetailId = value;
					this.SendPropertyChanged("DetailId");
					this.OnDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleId", DbType="Int")]
		public System.Nullable<int> ScheduleId
		{
			get
			{
				return this._ScheduleId;
			}
			set
			{
				if ((this._ScheduleId != value))
				{
					if (this._HeaderSchedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScheduleIdChanging(value);
					this.SendPropertyChanging();
					this._ScheduleId = value;
					this.SendPropertyChanged("ScheduleId");
					this.OnScheduleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="Char(5)")]
		public string SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", DbType="Char(5)")]
		public string TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Day", DbType="VarChar(10)")]
		public string Day
		{
			get
			{
				return this._Day;
			}
			set
			{
				if ((this._Day != value))
				{
					this.OnDayChanging(value);
					this.SendPropertyChanging();
					this._Day = value;
					this.SendPropertyChanged("Day");
					this.OnDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShiftId", DbType="Int")]
		public System.Nullable<int> ShiftId
		{
			get
			{
				return this._ShiftId;
			}
			set
			{
				if ((this._ShiftId != value))
				{
					if (this._Shift.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShiftIdChanging(value);
					this.SendPropertyChanging();
					this._ShiftId = value;
					this.SendPropertyChanged("ShiftId");
					this.OnShiftIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DetailSchedule_DetailScore", Storage="_DetailScores", ThisKey="DetailId", OtherKey="DetailID")]
		public EntitySet<DetailScore> DetailScores
		{
			get
			{
				return this._DetailScores;
			}
			set
			{
				this._DetailScores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HeaderSchedule_DetailSchedule", Storage="_HeaderSchedule", ThisKey="ScheduleId", OtherKey="ScheduleId", IsForeignKey=true)]
		public HeaderSchedule HeaderSchedule
		{
			get
			{
				return this._HeaderSchedule.Entity;
			}
			set
			{
				HeaderSchedule previousValue = this._HeaderSchedule.Entity;
				if (((previousValue != value) 
							|| (this._HeaderSchedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HeaderSchedule.Entity = null;
						previousValue.DetailSchedules.Remove(this);
					}
					this._HeaderSchedule.Entity = value;
					if ((value != null))
					{
						value.DetailSchedules.Add(this);
						this._ScheduleId = value.ScheduleId;
					}
					else
					{
						this._ScheduleId = default(Nullable<int>);
					}
					this.SendPropertyChanged("HeaderSchedule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shift_DetailSchedule", Storage="_Shift", ThisKey="ShiftId", OtherKey="ShiftId", IsForeignKey=true)]
		public Shift Shift
		{
			get
			{
				return this._Shift.Entity;
			}
			set
			{
				Shift previousValue = this._Shift.Entity;
				if (((previousValue != value) 
							|| (this._Shift.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shift.Entity = null;
						previousValue.DetailSchedules.Remove(this);
					}
					this._Shift.Entity = value;
					if ((value != null))
					{
						value.DetailSchedules.Add(this);
						this._ShiftId = value.ShiftId;
					}
					else
					{
						this._ShiftId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Shift");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_DetailSchedule", Storage="_Subject", ThisKey="SubjectId", OtherKey="SubjectId", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.DetailSchedules.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.DetailSchedules.Add(this);
						this._SubjectId = value.SubjectId;
					}
					else
					{
						this._SubjectId = default(string);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailScores(DetailScore entity)
		{
			this.SendPropertyChanging();
			entity.DetailSchedule = this;
		}
		
		private void detach_DetailScores(DetailScore entity)
		{
			this.SendPropertyChanging();
			entity.DetailSchedule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DetailScore")]
	public partial class DetailScore : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScoreDetailID;
		
		private string _StudentID;
		
		private int _DetailID;
		
		private System.Nullable<int> _Assignment;
		
		private System.Nullable<int> _MidExam;
		
		private System.Nullable<int> _FinalExam;
		
		private EntityRef<DetailSchedule> _DetailSchedule;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScoreDetailIDChanging(int value);
    partial void OnScoreDetailIDChanged();
    partial void OnStudentIDChanging(string value);
    partial void OnStudentIDChanged();
    partial void OnDetailIDChanging(int value);
    partial void OnDetailIDChanged();
    partial void OnAssignmentChanging(System.Nullable<int> value);
    partial void OnAssignmentChanged();
    partial void OnMidExamChanging(System.Nullable<int> value);
    partial void OnMidExamChanged();
    partial void OnFinalExamChanging(System.Nullable<int> value);
    partial void OnFinalExamChanged();
    #endregion
		
		public DetailScore()
		{
			this._DetailSchedule = default(EntityRef<DetailSchedule>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreDetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScoreDetailID
		{
			get
			{
				return this._ScoreDetailID;
			}
			set
			{
				if ((this._ScoreDetailID != value))
				{
					this.OnScoreDetailIDChanging(value);
					this.SendPropertyChanging();
					this._ScoreDetailID = value;
					this.SendPropertyChanged("ScoreDetailID");
					this.OnScoreDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailID", DbType="Int NOT NULL")]
		public int DetailID
		{
			get
			{
				return this._DetailID;
			}
			set
			{
				if ((this._DetailID != value))
				{
					if (this._DetailSchedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDetailIDChanging(value);
					this.SendPropertyChanging();
					this._DetailID = value;
					this.SendPropertyChanged("DetailID");
					this.OnDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Assignment", DbType="Int")]
		public System.Nullable<int> Assignment
		{
			get
			{
				return this._Assignment;
			}
			set
			{
				if ((this._Assignment != value))
				{
					this.OnAssignmentChanging(value);
					this.SendPropertyChanging();
					this._Assignment = value;
					this.SendPropertyChanged("Assignment");
					this.OnAssignmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MidExam", DbType="Int")]
		public System.Nullable<int> MidExam
		{
			get
			{
				return this._MidExam;
			}
			set
			{
				if ((this._MidExam != value))
				{
					this.OnMidExamChanging(value);
					this.SendPropertyChanging();
					this._MidExam = value;
					this.SendPropertyChanged("MidExam");
					this.OnMidExamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinalExam", DbType="Int")]
		public System.Nullable<int> FinalExam
		{
			get
			{
				return this._FinalExam;
			}
			set
			{
				if ((this._FinalExam != value))
				{
					this.OnFinalExamChanging(value);
					this.SendPropertyChanging();
					this._FinalExam = value;
					this.SendPropertyChanged("FinalExam");
					this.OnFinalExamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DetailSchedule_DetailScore", Storage="_DetailSchedule", ThisKey="DetailID", OtherKey="DetailId", IsForeignKey=true)]
		public DetailSchedule DetailSchedule
		{
			get
			{
				return this._DetailSchedule.Entity;
			}
			set
			{
				DetailSchedule previousValue = this._DetailSchedule.Entity;
				if (((previousValue != value) 
							|| (this._DetailSchedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DetailSchedule.Entity = null;
						previousValue.DetailScores.Remove(this);
					}
					this._DetailSchedule.Entity = value;
					if ((value != null))
					{
						value.DetailScores.Add(this);
						this._DetailID = value.DetailId;
					}
					else
					{
						this._DetailID = default(int);
					}
					this.SendPropertyChanged("DetailSchedule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_DetailScore", Storage="_Student", ThisKey="StudentID", OtherKey="StudentId", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.DetailScores.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.DetailScores.Add(this);
						this._StudentID = value.StudentId;
					}
					else
					{
						this._StudentID = default(string);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Expertise")]
	public partial class Expertise : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExpertiseID;
		
		private string _TeacherID;
		
		private string _SubjectID;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<Teacher> _Teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExpertiseIDChanging(int value);
    partial void OnExpertiseIDChanged();
    partial void OnTeacherIDChanging(string value);
    partial void OnTeacherIDChanged();
    partial void OnSubjectIDChanging(string value);
    partial void OnSubjectIDChanged();
    #endregion
		
		public Expertise()
		{
			this._Subject = default(EntityRef<Subject>);
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpertiseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExpertiseID
		{
			get
			{
				return this._ExpertiseID;
			}
			set
			{
				if ((this._ExpertiseID != value))
				{
					this.OnExpertiseIDChanging(value);
					this.SendPropertyChanging();
					this._ExpertiseID = value;
					this.SendPropertyChanged("ExpertiseID");
					this.OnExpertiseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", DbType="VarChar(8)")]
		public string TeacherID
		{
			get
			{
				return this._TeacherID;
			}
			set
			{
				if ((this._TeacherID != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIDChanging(value);
					this.SendPropertyChanging();
					this._TeacherID = value;
					this.SendPropertyChanged("TeacherID");
					this.OnTeacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Char(5)")]
		public string SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Expertise", Storage="_Subject", ThisKey="SubjectID", OtherKey="SubjectId", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Expertises.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Expertises.Add(this);
						this._SubjectID = value.SubjectId;
					}
					else
					{
						this._SubjectID = default(string);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Expertise", Storage="_Teacher", ThisKey="TeacherID", OtherKey="TeacherId", IsForeignKey=true)]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.Expertises.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.Expertises.Add(this);
						this._TeacherID = value.TeacherId;
					}
					else
					{
						this._TeacherID = default(string);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HeaderSchedule")]
	public partial class HeaderSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScheduleId;
		
		private string _ClassName;
		
		private System.Nullable<int> _Finalize;
		
		private EntitySet<DetailSchedule> _DetailSchedules;
		
		private EntityRef<Class> _Class;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScheduleIdChanging(int value);
    partial void OnScheduleIdChanged();
    partial void OnClassNameChanging(string value);
    partial void OnClassNameChanged();
    partial void OnFinalizeChanging(System.Nullable<int> value);
    partial void OnFinalizeChanged();
    #endregion
		
		public HeaderSchedule()
		{
			this._DetailSchedules = new EntitySet<DetailSchedule>(new Action<DetailSchedule>(this.attach_DetailSchedules), new Action<DetailSchedule>(this.detach_DetailSchedules));
			this._Class = default(EntityRef<Class>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScheduleId
		{
			get
			{
				return this._ScheduleId;
			}
			set
			{
				if ((this._ScheduleId != value))
				{
					this.OnScheduleIdChanging(value);
					this.SendPropertyChanging();
					this._ScheduleId = value;
					this.SendPropertyChanged("ScheduleId");
					this.OnScheduleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="VarChar(5)")]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Finalize", DbType="Int")]
		public System.Nullable<int> Finalize
		{
			get
			{
				return this._Finalize;
			}
			set
			{
				if ((this._Finalize != value))
				{
					this.OnFinalizeChanging(value);
					this.SendPropertyChanging();
					this._Finalize = value;
					this.SendPropertyChanged("Finalize");
					this.OnFinalizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HeaderSchedule_DetailSchedule", Storage="_DetailSchedules", ThisKey="ScheduleId", OtherKey="ScheduleId")]
		public EntitySet<DetailSchedule> DetailSchedules
		{
			get
			{
				return this._DetailSchedules;
			}
			set
			{
				this._DetailSchedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_HeaderSchedule", Storage="_Class", ThisKey="ClassName", OtherKey="ClassName", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.HeaderSchedules.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.HeaderSchedules.Add(this);
						this._ClassName = value.ClassName;
					}
					else
					{
						this._ClassName = default(string);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailSchedules(DetailSchedule entity)
		{
			this.SendPropertyChanging();
			entity.HeaderSchedule = this;
		}
		
		private void detach_DetailSchedules(DetailSchedule entity)
		{
			this.SendPropertyChanging();
			entity.HeaderSchedule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Shift")]
	public partial class Shift : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShiftId;
		
		private string _Time;
		
		private EntitySet<DetailSchedule> _DetailSchedules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShiftIdChanging(int value);
    partial void OnShiftIdChanged();
    partial void OnTimeChanging(string value);
    partial void OnTimeChanged();
    #endregion
		
		public Shift()
		{
			this._DetailSchedules = new EntitySet<DetailSchedule>(new Action<DetailSchedule>(this.attach_DetailSchedules), new Action<DetailSchedule>(this.detach_DetailSchedules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShiftId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ShiftId
		{
			get
			{
				return this._ShiftId;
			}
			set
			{
				if ((this._ShiftId != value))
				{
					this.OnShiftIdChanging(value);
					this.SendPropertyChanging();
					this._ShiftId = value;
					this.SendPropertyChanged("ShiftId");
					this.OnShiftIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Char(13)")]
		public string Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shift_DetailSchedule", Storage="_DetailSchedules", ThisKey="ShiftId", OtherKey="ShiftId")]
		public EntitySet<DetailSchedule> DetailSchedules
		{
			get
			{
				return this._DetailSchedules;
			}
			set
			{
				this._DetailSchedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailSchedules(DetailSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Shift = this;
		}
		
		private void detach_DetailSchedules(DetailSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Shift = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StudentId;
		
		private string _Name;
		
		private string _Address;
		
		private string _Gender;
		
		private System.Nullable<System.DateTime> _DateofBirth;
		
		private string _PhoneNumber;
		
		private string _Photo;
		
		private EntitySet<User> _Users;
		
		private EntitySet<DetailClass> _DetailClasses;
		
		private EntitySet<DetailScore> _DetailScores;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIdChanging(string value);
    partial void OnStudentIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnDateofBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateofBirthChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    #endregion
		
		public Student()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._DetailClasses = new EntitySet<DetailClass>(new Action<DetailClass>(this.attach_DetailClasses), new Action<DetailClass>(this.detach_DetailClasses));
			this._DetailScores = new EntitySet<DetailScore>(new Action<DetailScore>(this.attach_DetailScores), new Action<DetailScore>(this.detach_DetailScores));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="VarChar(8) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(150)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(7)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateofBirth", DbType="Date")]
		public System.Nullable<System.DateTime> DateofBirth
		{
			get
			{
				return this._DateofBirth;
			}
			set
			{
				if ((this._DateofBirth != value))
				{
					this.OnDateofBirthChanging(value);
					this.SendPropertyChanging();
					this._DateofBirth = value;
					this.SendPropertyChanged("DateofBirth");
					this.OnDateofBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(12)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="VarChar(100)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_User", Storage="_Users", ThisKey="StudentId", OtherKey="username")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_DetailClass", Storage="_DetailClasses", ThisKey="StudentId", OtherKey="StudentId")]
		public EntitySet<DetailClass> DetailClasses
		{
			get
			{
				return this._DetailClasses;
			}
			set
			{
				this._DetailClasses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_DetailScore", Storage="_DetailScores", ThisKey="StudentId", OtherKey="StudentID")]
		public EntitySet<DetailScore> DetailScores
		{
			get
			{
				return this._DetailScores;
			}
			set
			{
				this._DetailScores.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_DetailClasses(DetailClass entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_DetailClasses(DetailClass entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_DetailScores(DetailScore entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_DetailScores(DetailScore entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subject")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SubjectId;
		
		private string _Name;
		
		private System.Nullable<int> _Assignment;
		
		private System.Nullable<int> _MidExam;
		
		private System.Nullable<int> _FinalExam;
		
		private System.Nullable<int> _Shift;
		
		private System.Nullable<int> _ForGrade;
		
		private EntitySet<DetailSchedule> _DetailSchedules;
		
		private EntitySet<Expertise> _Expertises;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubjectIdChanging(string value);
    partial void OnSubjectIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAssignmentChanging(System.Nullable<int> value);
    partial void OnAssignmentChanged();
    partial void OnMidExamChanging(System.Nullable<int> value);
    partial void OnMidExamChanged();
    partial void OnFinalExamChanging(System.Nullable<int> value);
    partial void OnFinalExamChanged();
    partial void OnShiftChanging(System.Nullable<int> value);
    partial void OnShiftChanged();
    partial void OnForGradeChanging(System.Nullable<int> value);
    partial void OnForGradeChanged();
    #endregion
		
		public Subject()
		{
			this._DetailSchedules = new EntitySet<DetailSchedule>(new Action<DetailSchedule>(this.attach_DetailSchedules), new Action<DetailSchedule>(this.detach_DetailSchedules));
			this._Expertises = new EntitySet<Expertise>(new Action<Expertise>(this.attach_Expertises), new Action<Expertise>(this.detach_Expertises));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="Char(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Assignment", DbType="Int")]
		public System.Nullable<int> Assignment
		{
			get
			{
				return this._Assignment;
			}
			set
			{
				if ((this._Assignment != value))
				{
					this.OnAssignmentChanging(value);
					this.SendPropertyChanging();
					this._Assignment = value;
					this.SendPropertyChanged("Assignment");
					this.OnAssignmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MidExam", DbType="Int")]
		public System.Nullable<int> MidExam
		{
			get
			{
				return this._MidExam;
			}
			set
			{
				if ((this._MidExam != value))
				{
					this.OnMidExamChanging(value);
					this.SendPropertyChanging();
					this._MidExam = value;
					this.SendPropertyChanged("MidExam");
					this.OnMidExamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinalExam", DbType="Int")]
		public System.Nullable<int> FinalExam
		{
			get
			{
				return this._FinalExam;
			}
			set
			{
				if ((this._FinalExam != value))
				{
					this.OnFinalExamChanging(value);
					this.SendPropertyChanging();
					this._FinalExam = value;
					this.SendPropertyChanged("FinalExam");
					this.OnFinalExamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shift", DbType="Int")]
		public System.Nullable<int> Shift
		{
			get
			{
				return this._Shift;
			}
			set
			{
				if ((this._Shift != value))
				{
					this.OnShiftChanging(value);
					this.SendPropertyChanging();
					this._Shift = value;
					this.SendPropertyChanged("Shift");
					this.OnShiftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForGrade", DbType="Int")]
		public System.Nullable<int> ForGrade
		{
			get
			{
				return this._ForGrade;
			}
			set
			{
				if ((this._ForGrade != value))
				{
					this.OnForGradeChanging(value);
					this.SendPropertyChanging();
					this._ForGrade = value;
					this.SendPropertyChanged("ForGrade");
					this.OnForGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_DetailSchedule", Storage="_DetailSchedules", ThisKey="SubjectId", OtherKey="SubjectId")]
		public EntitySet<DetailSchedule> DetailSchedules
		{
			get
			{
				return this._DetailSchedules;
			}
			set
			{
				this._DetailSchedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Expertise", Storage="_Expertises", ThisKey="SubjectId", OtherKey="SubjectID")]
		public EntitySet<Expertise> Expertises
		{
			get
			{
				return this._Expertises;
			}
			set
			{
				this._Expertises.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailSchedules(DetailSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_DetailSchedules(DetailSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Expertises(Expertise entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Expertises(Expertise entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teacher")]
	public partial class Teacher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TeacherId;
		
		private string _Name;
		
		private string _PhoneNumber;
		
		private System.Nullable<System.DateTime> _DateofBirth;
		
		private string _Gender;
		
		private string _Address;
		
		private string _Photo;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Expertise> _Expertises;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeacherIdChanging(string value);
    partial void OnTeacherIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnDateofBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateofBirthChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    #endregion
		
		public Teacher()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Expertises = new EntitySet<Expertise>(new Action<Expertise>(this.attach_Expertises), new Action<Expertise>(this.detach_Expertises));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", DbType="VarChar(8) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(12)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateofBirth", DbType="Date")]
		public System.Nullable<System.DateTime> DateofBirth
		{
			get
			{
				return this._DateofBirth;
			}
			set
			{
				if ((this._DateofBirth != value))
				{
					this.OnDateofBirthChanging(value);
					this.SendPropertyChanging();
					this._DateofBirth = value;
					this.SendPropertyChanged("DateofBirth");
					this.OnDateofBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(7)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="VarChar(100)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_User", Storage="_Users", ThisKey="TeacherId", OtherKey="username")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Expertise", Storage="_Expertises", ThisKey="TeacherId", OtherKey="TeacherID")]
		public EntitySet<Expertise> Expertises
		{
			get
			{
				return this._Expertises;
			}
			set
			{
				this._Expertises.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
		
		private void attach_Expertises(Expertise entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_Expertises(Expertise entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
	}
}
#pragma warning restore 1591
